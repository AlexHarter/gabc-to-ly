#+TITLE: gabc-to-ly
#+AUTHOR: Alex Harter
[[file:REFERENCE-table_of_neumes.pdf][Table of Neumes PDF]]
#+PROPERTY: header-args python :tangle yes :tangle main.py
* WAIT init
*** DONE import libraries
#+BEGIN_SRC python :tangle no
  import argparse
  import regex
#+END_SRC
*** WAIT take in user args
- /path/to/file.gabc
- in which rhythmic system to interpret
  - p Proportional
  - s Classical Solesmes
  - v Vatican Edition
#+BEGIN_SRC python :tangle no
argparse
#+END_SRC
* WAIT parse data
** DONE import and split gabc
#+BEGIN_SRC python
example_gabc_file_path = "example.gabc"
with open(example_gabc_file_path, 'r') as file:
    gabc = file.read()

print(f"Full GABC: {gabc}")

gabc_header = gabc.split("%%")[0]
gabc_body = gabc.split("%%")[1]

print(f"GABC Header: {gabc_header}")
print(f"GABC Body: {gabc_body}")
#+END_SRC
** TODO header parser
- keep the header parser here since it won't be affected by schools of interpretation, and it's a small amount of code
#+PROPERTY: python :tangle yes :tangle header_parser.py
**** example input/output
***** example input
#+BEGIN_SRC gabc :tangle no
name:Deus Israel;
office-part:Introitus;
mode:3;
user-notes: LU 1288;
transcriber:Andrew Hinkley & Patrick Williams;
commentary: Tob. 7:15 & 8:19, Ps. 127:1;
annotation: IN. III;
#+END_SRC
***** desired output
#+BEGIN_SRC lilypond :tangle no
title = "Deus Israel"
office-part = "Introitus"
mode = 3
user-notes = "LU 1288"
transcriber = "Andrew Hinkley & Patrick Williams"
commentary = "Tob. 7:15 & 8:19, Ps. 127:1"
annotation = "IN. III"
#+END_SRC
**** TODO parser
- [ ] translate relevant GABC header entries to the corresponding Ly keyword when possible
#+BEGIN_SRC python
  def parse_gabc_header(gabc_header):
    gabc_header_entries = gabc_header.strip().split(";\n")
    gabc_header_dictionary = {}
    for entry in gabc_header_entries:
	key, value = entry.split(":", 1) # in case there are semicolons in the value
	gabc_header_dictionary.update({key.strip(): value.strip()})
      ly_metadata = []
  for key, value in gabc_header_dictionary.items():
      ly_metadata.append(f"{key} = {value}")
  print(f"LilyPond Metadata: {ly_metadata}")
#+END_SRC
** WAIT body parser
- [ ] apply correct body parser based on user args
  - wait until my Proportional Parser is functional
*** TODO [[file:body_parser-proportional.org][Proportionalist Rhythm]]
#+PROPERTY: header-args python :tangle yes :tangle body_parser-proportional.py
**** Model Input/Output
***** Example gabc body Input
[[file:MODEL_INPUT-Deus_Israel.pdf][gabc PDF]]
#+BEGIN_SRC gabc
  (c4) DE(gj)us(jjj_) Is(h_)ra(h_0!iWj_//kjjo_)el(ji__) *(,)
  con(gh~)jún(hjij)gat(ih~) vos,(h_) (;)
  et(g_) i(h_)pse(g_) sit(gfh_) vo(h_)bís(h_0!iwji.__H~rG~rhv_)cum,(hg.__) (;)

#+END_SRC
***** Desired LilyPond Melody Output
[[file:MODEL_OUTPUT-Deus_Israel.pdf][ly pdf]]
#+BEGIN_SRC lilypond :tangle no
  g8([ c]) c([ c] c4) a a( \quilisma b16 c4 d8[ c] \oriscus c4) c( b) \bar "'"
  g8([ \liquescentDiminutive a]) a([ c b c]) b([ \liquescentDiminutive a]) a4 \bar "," \break
  g4 a g g8([ f] a4) a a( \quilisma b16 c4 b4. a16[ g] a4) a( g2) \bar ","
#+END_SRC
***** Desired LilyPond Lyrics Output
#+BEGIN_SRC lilypond :tangle no
DE -- us Is -- ra -- \markup {"el" *}
con -- jún -- gat vos,
et ip -- se sit vo -- bís -- cum,
#+END_SRC
**** TODO Parser
***** TODO define datasets & functions
****** DONE define LyNote class
- I think this is an unnecesarry complication
  - the translation is direct enough
#+BEGIN_SRC python :tangle no
class LyNote:
    def __init__(self, pitch_class, accidental="", octave, duration, special_neume="", liquescence=""):
        self.pitch_class = pitch_class
        self.accidental = accidental
        self.octave = octave
        self.duration = duration
        self.special_neume = special_neume
        self.liquescence = liquescence

    def __str__(self):
        f"{self.pitch_class}{self.accidental}{self.octave}{self.duration}{self.special_neume}{self.liquescence}"
#+END_SRC
****** datasets
- add as I need them
#+BEGIN_SRC python
gabc_positions_with_position_ints = {
    "a": 0,
    "b": 1,
    "c": 2,
    "d": 3,
    "e": 4,
    "f": 5,
    "g": 6,
    "h": 7,
    "i": 8,
    "j": 9,
    "k": 10,
    "l": 11,
    "m": 12
}
gabc_positions = gabc_positions_with_position_ints.keys()
clefs_with_position_int_of_do = {
    "c1": 3,
    "c2": 5,
    "c3": 7,
    "c4": 9,
    "f1": 0,
    "f2": 2,
    "f3": 4,
    "f4": 6
}
clefs = clefs_with_position_int_of_do.keys()
distance_from_do_with_ly_pitch_classes = {
    -9: "a",
    -8: "b",
    -7: "c",
    -6: "d",
    -5: "e",
    -4: "f",
    -3: "g",
    -2: "a",
    -1: "b",
     0: "c",
     1: "d",
     2: "e",
     3: "f",
     4: "g",
     5: "a",
     6: "b"
}
#+END_SRC
****** TODO functions
******* TODO Calculate LilyPond Pitch Class from a given gabc Position
#+BEGIN_SRC python
  def gabc_position_to_ly_pitch_class(clef, gabc_position): # keep this method
      distance_from_do = gabc_positions_with_position_ints[gabc_position] - clefs_with_position_int_of_do[clef]
      ly_pitch_class = distance_from_do_with_ly_pitch_classes[distance_from_do]
      return ly_pitch_class
#+END_SRC
**** TODO Melody-by-Syllable Parser
- I choose a separate function for the melody within the syllable because it is guaranteed to be self-contained, apart from the clef.
  - This helps with slurs, beaming, and alterations.
  - What are the rules for accidentals?  I think that they last for the word, so that will have to be handled outside of this function
#+BEGIN_SRC python
  def parse_syllable_melody(syllable_melody):
      for i, c in enumerate(syllable_melody):
	  if c in gabc_positions: # pitches
	      ly_melody += gabc_position_to_ly_pitch_class(clef, c)
	      previous
	  else: # modifier characters
	      match c:
		  case "_": # long duration - if by itself, quarter note
		      # this one is annoying to parse because two in a row will affect the previous two pitches
		      if previous_rhythmic_marking is not "4":
			  ly_melody += "4"
			  previous_rhythmic_marking = "4"
		  case ".": # longer duration - half note or dotted quarter note, depending on context
		      if syllable_melody.search("rxr") is "rxr":
			  # "r.r occurs"
			  ly_melody += "4."
			  previous_rhythmic_marking = "4."
		      elif syllable_melody.search("rxr") is not "rxr":
			  ly_melody += "8"
			  active_rhythm

		  case "r": # if one, sixteenth grace note, if two after a dotted note, two sixteenth notes
		      
		  case "o": # oriscus, upper auxiliary
		  case "W": # quilisma, note before, lower auxiliary
		  case "~": # diminutive liquescence
		  case "<": # ascending augmentative liquescence
		  case ">": # descending augmentative liquescence
		  case other:
		      # add eighth note rhythm
		      if active_rhythm is not "8":
			  ly_melody += 8
			  active_rhythm = "8"
		      break
      return ly_melody

#+END_SRC
******* TODO Main Parser
#+BEGIN_SRC python
  def parse_gabc_body_to_ly_melody_and_lyrics(gabc_body):
      for i, c in enumerate(gabc_body):
	  gabc_body = gabc_body.strip()

	  # we expect the clef to be defined first
	  if i == 0:
	      if c == "(":

		  if gabc_body[i+1:i+3] in clefs and gabc_body[i+3] == ")":
		      clef = gabc_body[i+1:i+3]
		      i += 4
		  else:
		      print("clef not defined")
		      return 0

	  elif c == "(":
	      parsing_mode = "melody"
	      melisma_index += 1
	      break
	  elif c == ")":

	  if gabc_body[i+1] == " ":
	      ly_lyrics += " "
	  else:
	      ly_lyrics += " -- "

	  parsing_mode = "lyrics"
	  break

	  elif parsing_mode == "lyrics":
	      ly_lyrics += c
#+END_SRC
**** TODO Test
#+BEGIN_SRC python
  print("LilyPond Melody:")
  print(ly_melody)
  print("LilyPond Lyrics:")
  print(ly_lyrics)
#+END_SRC
*** WAIT Classical Solesmes Rhythm
*** WAIT Editio Vaticana Rhythm
* TODO output
** TODO Lilypond template
- [[https://lilypond.org/doc/v2.24/Documentation/notation/the-emmentaler-font#vaticana-glyphs][Lilypond Emmentaler Font]]
#+BEGIN_SRC lilypond :tangle template.ly
\version "2.24.4"

\header {
  %ly_metadata
}

oriscus = {
  \once \override NoteHead.stencil = #ly:text-interface::print
  \once \override NoteHead.text = \markup \musicglyph "noteheads.ssolesmes.oriscus"
  \once \set fontSize = 3
}

quilisma = {
  \once \override NoteHead.stencil = #ly:text-interface::print
  \once \override NoteHead.text = \markup \musicglyph "noteheads.svaticana.quilisma"
  \once \set fontSize = 3
  \once \override Stem.transparent = ##t
}

liquescentDiminutive = {
  \once \set fontSize = -3
}

liquescentAugmentativeAscending = {
  \once \override NoteHead.stencil = #ly:text-interface::print
  \once \override NoteHead.text = \markup \musicglyph "noteheads.ssolesmes.auct.asc"
  \once \set fontSize = 3
}

liquescentAugmentativeDescending = {
  \once \override NoteHead.stencil = #ly:text-interface::print
  \once \override NoteHead.text = \markup \musicglyph "noteheads.ssolesmes.auct.desc"
  \once \set fontSize = 3
}

global = {
  \key c \major
  \candenzaOn
  \omit Staff.TimeSignature
  \override Staff.StaffSymbol.color = #darkred
}

melody = \transpose c c \relative c'' {
  \global

  %ly_melody
}

text = \lyricmode {
  %ly_lyrics
}

\score {
  <<
  \new Staff {
    \context Voice = "vocal" { \melody }
  }
  \new Lyrics \lyricsto "vocal" \text
  >>
  \layout {
    \context {
      \Staff
      instrumentName = %mode
      \consists Custos_engraver
      \override Custos.style = #'medicaea
    }
  }
}
% template generated from Org-Mode on <%DATE>
% score generated from https://github.com/AlexHarter/gabc-to-ly
#+END_SRC
** TODO Import template
#+BEGIN_SRC python
with open("template.ly", "r") as file:
    ly_template = file.read()
#+END_SRC
** TODO Interpolate template with data
#+BEGIN_SRC python
  ly_template_interpolated = ly_template
  ly_template_interpolated = ly_template_interpolated.replace("% ly_metadeta", ''.join(ly_metadata))
  ly_template_interpolated = ly_template_interpolated.replace("% ly_melody", ly_melody)
  ly_template_interpolated = ly_template_interpolated.replace("% ly_lyrics", ly_lyrics)

  with open("chant.ly", "w") as file:
      file.write(ly_template_interpolated)
#+END_SRC
** WAIT Footnotes
- [ ] interpolate with actual date
#+BEGIN_SRC python
# tangled from Org-Mode on <#DATE>
#+END_SRC
