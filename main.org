#+TITLE: gabc-to-ly.py main org file
#+AUTHOR: Alex Harter
[[file:reference/table_of_neumes.pdf][Table of Neumes]]
#+PROPERTY: header-args python :tangle yes :tangle main.py
* WAIT init
*** DONE import libraries
#+BEGIN_SRC python :tangle no
  import argparse
  import regex
#+END_SRC
*** WAIT take in user args
- /path/to/file.gabc
- in which rhythmic system to interpret
#+BEGIN_SRC python :tangle no
#TODO take in user args
#+END_SRC
* WAIT parse data
- wait until I'm done 
** DONE import and split gabc
#+BEGIN_SRC python
example_gabc_file_path = "example.gabc"
with open(example_gabc_file_path, 'r') as file:
    gabc = file.read()

print(f"Full GABC: {gabc}")

gabc_header = gabc.split("%%")[0]
gabc_body = gabc.split("%%")[1]

print(f"GABC Header: {gabc_header}")
print(f"GABC Body: {gabc_body}")
#+END_SRC
** TODO header parser
- keep the header parser here since it won't be affected by schools of interpretation, and it's a small amount of code
#+PROPERTY: python :tangle yes :tangle header_parser.py
**** example input/output
***** example input
#+BEGIN_SRC gabc :tangle no
name:Deus Israel;
office-part:Introitus;
mode:3;
user-notes: LU 1288;
transcriber:Andrew Hinkley & Patrick Williams;
commentary: Tob. 7:15 & 8:19, Ps. 127:1;
annotation: IN. III;
#+END_SRC
***** desired output
#+BEGIN_SRC lilypond :tangle no
title = "Deus Israel"
office-part = "Introitus"
mode = 3
user-notes = "LU 1288"
transcriber = "Andrew Hinkley & Patrick Williams"
commentary = "Tob. 7:15 & 8:19, Ps. 127:1"
annotation = "IN. III"
#+END_SRC
**** TODO parser
- [ ] translate relevant GABC header entries to the corresponding Ly keyword when possible
#+BEGIN_SRC python
  def parse_gabc_header(gabc_header):
    gabc_header_entries = gabc_header.strip().split(";\n")
    gabc_header_dictionary = {}
    for entry in gabc_header_entries:
	key, value = entry.split(":", 1) # in case there are semicolons in the value
	gabc_header_dictionary.update({key.strip(): value.strip()})
      ly_metadata = []
  for key, value in gabc_header_dictionary.items():
      ly_metadata.append(f"{key} = {value}")
  print(f"LilyPond Metadata: {ly_metadata}")
#+END_SRC
** WAIT body parser
- [ ] apply correct body parser based on user args
  - wait until my Proportional Parser is functional
*** TODO [[file:body_parser-proportional.org][Proportionalist Rhythm]]
*** WAIT Classical Solesmes Rhythm
*** WAIT Editio Vaticana Rhythm
* TODO output
** TODO Lilypond template
- "gregorian.ly" is not helpful to include
  - it causes problems because it is really meant for quadratic notation
    - spacing
    - bar lines
  - better to define exactly what I need in the template
    - use "/usr/share/lilypond/2.24.3/ly/gregorian.ly" to start
    - perhaps make my own extension?
#+BEGIN_SRC lilypond :tangle template.ly
\version "2.24.3"

\header {
  % ly_metadata
}

global = {
  \candenzaOn
  \omit Staff.TimeSignature
  \key c \major
}

melody = \relative c'' {
  \global

  % ly_melody
}

text = \lyricmode {
  % ly_lyrics
}

\score {
  <<
  \new Staff {
    \context Voice = "vocal" { \melody }
  }
  \new Lyrics \lyricsto "vocal" \text
  >>
}
% template generated from Org-Mode on <%DATE>
% generated from https://github.com/AlexHarter/gabc-to-ly
#+END_SRC
** TODO Import template
#+BEGIN_SRC python
with open("template.ly", "r") as file:
    ly_template = file.read()
#+END_SRC
** TODO Interpolate template with data
#+BEGIN_SRC python
  ly_template_interpolated = ly_template
  ly_template_interpolated = ly_template_interpolated.replace("% ly_metadeta", ''.join(ly_metadata))
  ly_template_interpolated = ly_template_interpolated.replace("% ly_melody", ly_melody)
  ly_template_interpolated = ly_template_interpolated.replace("% ly_lyrics", ly_lyrics)

  with open("chant.ly", "w") as file:
      file.write(ly_template_interpolated)
#+END_SRC
** WAIT Footnotes
- [ ] interpolate with actual date
#+BEGIN_SRC python
# tangled from Org-Mode on <#DATE>
#+END_SRC
